---
layout: post
title:  "Python Integration in RStudio?"
date:   2021-01-20 15:10:56 +0900
categories: notes
---

<center><img src="https://ferdie.org/images/rstudio.jpg" alt="title" style="zoom: 25%;" /></center>

It's finally here! *Well,* it has been here actually. The `reticulate` package provides tools for interoperability between Python and R, which allows:

* Calling Python from R in a variety of ways including R Markdown, sourcing Python scripts, importing Python modules, and using Python interactively within an R session.
* Translation between R and Python objects (for example, between R and Pandas data frames, or between R-matrices and NumPy arrays).
* Flexible binding to different versions of Python including virtual environments and Conda environments.

### Why Integrate? 

Data scientists no longer have to choose between R or Python -- especially when data science teams today have the ability to leverage both R and Python in their projects. Under the same platform there is:

1. Easier collaboration and sharing work among teams 
2. Less cost on a project for organization and maintenance of projects with the elimination of additional overhead
3. Less effort for the maintenance, management, and scale of projects that use separate environments of different languages. 

Like Anaconda, the data science ecosystem can be readily accessible by one platform.

### So What Changed?

Through the new [update](https://blog.rstudio.com/2021/01/19/announcing-rstudio-1-4/) for RStudio 1.4, the Python editing experience has been improved even further:

- The default Python interpreter to be used by RStudio / `reticulate` can now be customized in the Global Options pane.
- The Environment pane now displays a summary of Python objects available in the main module when the `reticulate` REPL is active.
- Python objects can now be viewed and explored within the RStudio data viewer and object explorer.

Currently, only static plots are supported, and may be implemented by future updates. However, this means that RStudio can now render plots generated by both `seaborn` and `matplotlib` for data visualizations.  Additionally,`matplotlib` plots are now displayed within the Plots pane when `show()` is called.



<center><img src="https://ferdie.org/images/seaborn.png" alt="seaborn" style="zoom: 25%;" /></center>

### Configuring Python in RStudio:

So to configure python with RStudio, make sure to first install a base version of Python.



Then install the `reticulate` package from CRAN:

```R
install.packages("reticulate")
```

`reticulate` uses the Python version from your PATH which can be checked through:

```R
Sys.which("python")) -> "C:\Users\ferdi\AppData\Local\Programs\Python\PYTHON~1\python.exe" 
```

You can also enable virtual/conda environments:

```R
library(reticulate)
use_virtualenv("myenv") or use_condaenv("myenv")
```

Now, you can run different chunks using both python and R:



<center><img src="https://ferdie.org/images/chunks.png" alt="chunks" style="zoom: 25%;" /></center>

--

For more resources:

1. [Reticulate Documentation](https://rstudio.github.io/reticulate/)
2. [Why RStudio Supports Python for Data Science)](https://blog.rstudio.com/2020/10/30/why-rstudio-supports-python/)